# -*- shell-script -*-

#
# eth1: WAN interface
# eth0: LAN & IPMI interface
# br0 : bridges containers to eth0
# 

@def $IP_WORLD = 69.160.46.92;
@def $IP_POOL = (69.160.46.91 69.160.46.92);
@def $NET_PRIVATE = (127.0.0.1 10.2.1.0/24);
@def $ORVANT = 69.160.46.64/27;
@def $GW = 69.160.46.65;
@def $HOME = jerkize.kicks-ass.net;
@def $FE2 = `host fe2 | awk '{print $NF}'`;

# TODO: A better way to manage exposed services. With a trailing pipe
# symbol, ferm executes a program and parses its output:
#
#   @include '/root/generate_ferm_rules.sh $HOSTNAME|'


table filter {
    chain INPUT {
        policy DROP;

        # Connection tracking.
        mod state state INVALID DROP;
        mod state state (ESTABLISHED RELATED) ACCEPT;

        # Allow local connections.
        interface (lo br0) ACCEPT;

        # Respond to ping.
        proto icmp icmp-type echo-request ACCEPT;

        # For IPsec.
        interface eth1 {
            proto udp dport 500 ACCEPT;
            proto (esp ah) ACCEPT;
        }

        # Allow SSH connections from trusted hosts only.
        saddr ($IP_POOL $HOME) {
            proto tcp dport 54321 ACCEPT;
        }
        # Allow SSH from anywhere while configuring network.
        proto tcp dport ssh ACCEPT;

        # Allow zabbix agents from the private network.
        # saddr $NET_PRIVATE proto tcp dport zabbix-agent ACCEPT;
        # saddr $NET_PRIVATE proto tcp dport zabbix-trapper ACCEPT;

        # We provide DNS and SMTP services for the internal net.
        interface br0 saddr $NET_PRIVATE {
            proto (udp tcp) dport domain ACCEPT;
            proto tcp dport smtp ACCEPT;
            proto (udp tcp) dport snmp ACCEPT;
        }
    }
    chain OUTPUT {
        policy ACCEPT;
    }
    chain FORWARD {
        policy DROP;

        # Drop upstream DHCP server replies.
        saddr 10.1.1.1 proto (udp tcp) sport (67 68) DROP;

        # Connection tracking.
        mod state state INVALID DROP;
        mod state state (ESTABLISHED RELATED) ACCEPT;

        # Connections from the internal net to the internet or to other
        # internal nets are allowed.
        interface br0 ACCEPT;

        interface eth1 outerface br0 daddr $NET_PRIVATE proto tcp dport 22 ACCEPT;
        interface eth1 outerface br0 daddr $FE2 proto tcp dport 80 ACCEPT;
    }
}

table nat {
    chain POSTROUTING {
        # Masquerade private network.
        saddr $NET_PRIVATE outerface eth1 MASQUERADE;
    }
    chain PREROUTING {
        interface eth1 proto tcp dport   80 DNAT to "$FE2:80";
    }
}

# IPv6:
#domain ip6 {
#    table filter {
#        chain INPUT {
#            policy ACCEPT;
#            # ...
#        }
#        # ...
#    }
#}
